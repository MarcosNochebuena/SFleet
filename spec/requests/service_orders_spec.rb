require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/service_orders", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # ServiceOrder. As you add validations to ServiceOrder, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    vehicle = FactoryBot.create(:vehicle)
    maintenance_report = FactoryBot.create(:maintenance_report)
    FactoryBot.attributes_for(:service_order, vehicle_id: vehicle.id, maintenance_report_id: maintenance_report.id, creation_date: Date.current, estimated_cost: 0.0, status: :open)
  }

  let(:invalid_attributes) {
    FactoryBot.attributes_for(:service_order, vehicle_id: nil, maintenance_report_id: nil, creation_date: nil, estimated_cost: nil, status: nil)
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ServiceOrdersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      ServiceOrder.create! valid_attributes
      get service_orders_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      service_order = ServiceOrder.create! valid_attributes
      get service_order_url(service_order), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new ServiceOrder" do
        expect {
          post service_orders_url,
               params: { service_order: valid_attributes }, headers: valid_headers, as: :json
        }.to change(ServiceOrder, :count).by(1)
      end

      it "renders a JSON response with the new service_order" do
        post service_orders_url,
             params: { service_order: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new ServiceOrder" do
        expect {
          post service_orders_url,
               params: { service_order: invalid_attributes }, as: :json
        }.to change(ServiceOrder, :count).by(0)
      end

      it "renders a JSON response with errors for the new service_order" do
        post service_orders_url,
             params: { service_order: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { estimated_cost: 100 }
      }

      it "updates the requested service_order" do
        service_order = ServiceOrder.create! valid_attributes
        patch service_order_url(service_order),
              params: { service_order: new_attributes }, headers: valid_headers, as: :json
        service_order.reload
        expect(response).to have_http_status(:ok)
        expect(service_order.estimated_cost).to eq(100)
      end

      it "renders a JSON response with the service_order" do
        service_order = ServiceOrder.create! valid_attributes
        patch service_order_url(service_order),
              params: { service_order: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the service_order" do
        service_order = ServiceOrder.create! valid_attributes
        patch service_order_url(service_order),
              params: { service_order: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update_status" do
    context "with valid parameters" do
      let(:new_attributes) {
        { status: :closed }
      }

      it "updates the requested service_order" do
        service_order = ServiceOrder.create! valid_attributes
        patch status_service_order_url(service_order),
              params: { service_order: new_attributes }, headers: valid_headers, as: :json
        service_order.reload
        expect(response).to have_http_status(:ok)
        expect(service_order.status).to eq("closed")
      end

      it "renders a JSON response with the service_order" do
        service_order = ServiceOrder.create! valid_attributes
        patch status_service_order_url(service_order),
              params: { service_order: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the service_order" do
        service_order = ServiceOrder.create! valid_attributes
        patch status_service_order_url(service_order),
              params: { service_order: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested service_order" do
      service_order = ServiceOrder.create! valid_attributes
      expect {
        delete service_order_url(service_order), headers: valid_headers, as: :json
      }.to change(ServiceOrder, :count).by(-1)
    end
  end
end
